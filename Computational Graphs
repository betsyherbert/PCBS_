#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 15 16:39:16 2019

@author: pc
"""

# Define operation 

class Operation:
    """ Graph node which performs a computation. """
    
    def __init__(self, input_nodes = []):
        
        """ Construct operation """
        self.input_nodes = input_nodes
        
        # Initialise list of consumers 
        self.consumers = []
        
        # Append operation to list of consumers of all input nodes
        for input_node in input_nodes:
            input_node.consumers.append(self)
            
        # Append operation to list of operations in currently active default graph
        _default_graph.operations.append(self)
        
    def compute(self):
        """ Computes output of operation """
        pass 
    
# Implement elementary operations
        
# Addition
    
class add(Operation):
    """ Returns x + y element-wise """
    
    def __init__(self, x, y):
        """ Construct add with arguments x and y """
        
        super().__init__([x, y])
    
    def compute(self, x_value, y_value):
        """ Compute output of add """
        return x_value + y_value
    
# Multiplication
    
class matmul(Operation):
    """ Multiplies matrix a by matrix b """
    
    def __init__(self, a, b):
        """ Construct matrix multiplication with arguments a and b """
        
        super().__init__([a, b])
        
    def compute(self, a_value, b_value):
        """ Compute output of multiplication """
        
        return a_value.dot(b_value)
    
    
# Placeholder
        
class placeholder:
    """ Represents a placeholder node that takes a value """
    
    def __init__(self):
        """ Construct placeholder """
        
        self.consumers = []
        
        # Append to list of placeholders in currently active default graph
         
        _default_graph.placeholders.append(self)
    
    
# Variables
        
class Variable:
    """ Represents a value which is intrinsic to the graph """
    
    def __init__(self, initial_value = None):
        """ Construct variable """
        
        self.value = initial_value
        self.consumers = []
        
        # Append to list of variables in currently active default graph
        _default_graph.placeholders.append(self)
        
# Graph class
        
class Graph:
    """ Represents a computational graph """
    
    def __init__(self):
        """ Construct graph """
        self.operations = []
        self.placeholders = []
        self.variables = []
        
    def as_default(self):
        global _default_graph
        _default_graph = self
    
    
# Create example graph to calculate affine transformation 

Graph().as_default()
# Create variables 
A = Variable([[1, 0], [0, -1]])
b = Variable([1, 1])
# Create placeholder
x = placeholder ()
# Create hidden node y
y = matmul(A, x)
# Create output node z
z = add(y, b)    
    
# Compute output of operation 

import numpy as np

class Session:
    """ Represents a particular execution of a computational graph """
    
    def run(self, operation, feed_dict={}):
        """ Computes output of operation """
        
        # Perform a post-order traversal of the graph to bring nodes to right order 
        nodes_postorder = traverse_postorder(operation)
        
        # Iterate all nodes to determine their value
        for node in nodes_postorder:
            
            if type(node) == placeholder:
                # Set node value to placeholder valye
                node.output = feed_dict[node]
            elif type(node) == Variable:
                # Set node value to variable's value attribute
                node.output = node.value
            else: # Operation 
                # Get input values for operation 
                node.inputs = [input_node.output for input_node in node.input_nodes]
                
                # Compute output of operation
                node.output = node.compute(*node.inputs)
                
            # Convert lists to numpy arrays
            if type(node.output) == list:
                node.output = np.array(node.output)
                
        # Return requested node value
        return operation.output 
    
def traverse_postorder(operation):
    """ Performs a post-order traversal, returning a list of nodes
    in the order in which they have to be computed """

    nodes_postorder = []

    def recurse(node):
        if isinstance(node, Operation):
            for input_node in node.input_nodes:
                recurse(input_node)
        nodes_postorder.append(node)

    recurse(operation)
    return nodes_postorder

session = Session()
output = session.run(z, {x: [3, 4]})
print(output)